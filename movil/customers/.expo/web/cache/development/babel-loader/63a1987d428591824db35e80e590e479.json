{"ast":null,"code":"import createNumberMask from \"./createNumberMask\";\nvar BRL_CAR_PLATE = [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/, '-', /\\d/, /\\w/, /\\d/, /\\d/];\nvar BRL_CNPJ = [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\nvar BRL_CPF = [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n\nvar BRL_CPF_CNPJ = function BRL_CPF_CNPJ(text) {\n  var rawValue = (text === null || text === void 0 ? void 0 : text.replace(/\\D+/g, '')) || '';\n  return rawValue.length <= 11 ? BRL_CPF : BRL_CNPJ;\n};\n\nvar BRL_CURRENCY = createNumberMask({\n  prefix: ['R', '$', ' '],\n  separator: ',',\n  delimiter: '.',\n  precision: 2\n});\nvar BRL_PHONE = ['(', /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\nvar CREDIT_CARD = [/\\d/, /\\d/, /\\d/, /\\d/, ' ', [/\\d/], [/\\d/], [/\\d/], [/\\d/], ' ', [/\\d/], [/\\d/], [/\\d/], [/\\d/], ' ', /\\d/, /\\d/, /\\d/, /\\d/];\n\nvar DATE_DDMMYYYY = function DATE_DDMMYYYY() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cleanText = text.replace(/\\D+/g, '');\n  var secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(0) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  var secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(2) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  return [/[0-3]/, secondDigitDayMask, '/', /[0-1]/, secondDigitMonthMask, '/', /\\d/, /\\d/, /\\d/, /\\d/];\n};\n\nvar DATE_MMDDYYYY = function DATE_MMDDYYYY() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cleanText = text.replace(/\\D+/g, '');\n  var secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(0) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  var secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(2) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [/[0-1]/, secondDigitMonthMask, '/', /[0-3]/, secondDigitDayMask, '/', /\\d/, /\\d/, /\\d/, /\\d/];\n};\n\nvar DATE_YYYYMMDD = function DATE_YYYYMMDD() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var cleanText = text.replace(/\\D+/g, '');\n  var secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(4) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(4) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  var secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(6) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n\n  if (cleanText.charAt(6) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [/\\d/, /\\d/, /\\d/, /\\d/, '/', /[0-1]/, secondDigitMonthMask, '/', /[0-3]/, secondDigitDayMask];\n};\n\nvar ZIP_CODE = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/];\nexport default {\n  BRL_CAR_PLATE: BRL_CAR_PLATE,\n  BRL_CNPJ: BRL_CNPJ,\n  BRL_CPF: BRL_CPF,\n  BRL_CPF_CNPJ: BRL_CPF_CNPJ,\n  BRL_CURRENCY: BRL_CURRENCY,\n  BRL_PHONE: BRL_PHONE,\n  CREDIT_CARD: CREDIT_CARD,\n  DATE_DDMMYYYY: DATE_DDMMYYYY,\n  DATE_MMDDYYYY: DATE_MMDDYYYY,\n  DATE_YYYYMMDD: DATE_YYYYMMDD,\n  ZIP_CODE: ZIP_CODE\n};","map":{"version":3,"sources":["Masks.ts"],"names":["BRL_CAR_PLATE","BRL_CNPJ","BRL_CPF","BRL_CPF_CNPJ","text","rawValue","BRL_CURRENCY","createNumberMask","prefix","separator","delimiter","precision","BRL_PHONE","CREDIT_CARD","DATE_DDMMYYYY","cleanText","secondDigitDayMask","secondDigitMonthMask","DATE_MMDDYYYY","DATE_YYYYMMDD","ZIP_CODE"],"mappings":"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","sourcesContent":["import createNumberMask from './createNumberMask';\nimport type { Mask, MaskArray } from './formatWithMask.types';\n\nconst BRL_CAR_PLATE = [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/, '-', /\\d/, /\\w/, /\\d/, /\\d/];\n\nconst BRL_CNPJ = [\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '/',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n];\n\nconst BRL_CPF = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '.',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n];\n\nconst BRL_CPF_CNPJ = (text?: string) => {\n  const rawValue = text?.replace(/\\D+/g, '') || '';\n  return rawValue.length <= 11 ? BRL_CPF : BRL_CNPJ;\n};\n\nconst BRL_CURRENCY = createNumberMask({\n  prefix: ['R', '$', ' '],\n  separator: ',',\n  delimiter: '.',\n  precision: 2,\n});\n\nconst BRL_PHONE = [\n  '(',\n  /\\d/,\n  /\\d/,\n  ')',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n];\n\nconst CREDIT_CARD = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  ' ',\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  ' ',\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  [/\\d/],\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n] as MaskArray;\n\nconst DATE_DDMMYYYY: Mask = (text = '') => {\n  const cleanText = text.replace(/\\D+/g, '');\n\n  let secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n  if (cleanText.charAt(0) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  let secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n  if (cleanText.charAt(2) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  return [\n    /[0-3]/,\n    secondDigitDayMask,\n    '/',\n    /[0-1]/,\n    secondDigitMonthMask,\n    '/',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n  ];\n};\n\nconst DATE_MMDDYYYY: Mask = (text = '') => {\n  const cleanText = text.replace(/\\D+/g, '');\n\n  let secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(0) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n  if (cleanText.charAt(0) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  let secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(2) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n  if (cleanText.charAt(2) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [\n    /[0-1]/,\n    secondDigitMonthMask,\n    '/',\n    /[0-3]/,\n    secondDigitDayMask,\n    '/',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n  ];\n};\n\nconst DATE_YYYYMMDD: Mask = (text = '') => {\n  const cleanText = text.replace(/\\D+/g, '');\n\n  let secondDigitMonthMask = /\\d/;\n\n  if (cleanText.charAt(4) === '0') {\n    secondDigitMonthMask = /[1-9]/;\n  }\n  if (cleanText.charAt(4) === '1') {\n    secondDigitMonthMask = /[012]/;\n  }\n\n  let secondDigitDayMask = /\\d/;\n\n  if (cleanText.charAt(6) === '0') {\n    secondDigitDayMask = /[1-9]/;\n  }\n  if (cleanText.charAt(6) === '3') {\n    secondDigitDayMask = /[01]/;\n  }\n\n  return [\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    '/',\n    /[0-1]/,\n    secondDigitMonthMask,\n    '/',\n    /[0-3]/,\n    secondDigitDayMask,\n  ];\n};\n\nconst ZIP_CODE = [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/];\n\nexport default {\n  BRL_CAR_PLATE,\n  BRL_CNPJ,\n  BRL_CPF,\n  BRL_CPF_CNPJ,\n  BRL_CURRENCY,\n  BRL_PHONE,\n  CREDIT_CARD,\n  DATE_DDMMYYYY,\n  DATE_MMDDYYYY,\n  DATE_YYYYMMDD,\n  ZIP_CODE,\n};\n"]},"metadata":{},"sourceType":"module"}